name: packer

on:
  push:

env:
  PRODUCT_VERSION: "latest"

jobs:
  packer:
    runs-on: ubuntu-latest
    name: Run Packer
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Sets ip address
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Sets IP address on security group
        run: >
          MY_PUBLIC_IP=$(curl ifconfig.me) &&
          echo ${MY_PUBLIC_IP} &&
          aws ec2 modify-security-group-rules
          --group-id ${{ vars.SECURITY_GROUP_ID }}
          --security-group-rules SecurityGroupRuleId=${{ vars.SECURITY_GROUP_RULE_ID }},SecurityGroupRule="{CidrIpv4=${MY_PUBLIC_IP},Description=GHAction,IpProtocol=tcp,ToPort=22,FromPort=22}"

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: ${{ env.PRODUCT_VERSION }}

      - name: Run `packer init`
        id: init
        run: "packer init ."

      - name: Run `packer validate`
        id: validate
        run: >
          packer validate
          -var vpc_id=${{ vars.VPC_ID }}
          -var subnet_id=${{ vars.SUBNET_ID }}
          -var security_group_id=${{ vars.SECURITY_GROUP_ID }}
          -var server_private_key=${{ secrets.SERVER_PRIVATE_KEY }} 
          -var server_public_key=${{ secrets.SERVER_PUBLIC_KEY }} 
          -var client_public_key=${{ secrets.CLIENT_PUBLIC_KEY }}
          -var region=${{ vars.AWS_REGION }}
          .

      - name: Run `packer build`
        id: build
        run: >
          packer build -var vpc_id=${{ vars.VPC_ID }}
          -var subnet_id=${{ vars.SUBNET_ID }}
          -var security_group_id=${{ vars.SECURITY_GROUP_ID }}
          -var server_private_key=${{ secrets.SERVER_PRIVATE_KEY }}
          -var server_public_key=${{ secrets.SERVER_PUBLIC_KEY }}
          -var client_public_key=${{ secrets.CLIENT_PUBLIC_KEY }}
          -var region=${{ vars.AWS_REGION }}
          -color=false -on-error=abort .
        env:          
          AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          AWS_REGION: "${{ vars.AWS_REGION }}"
